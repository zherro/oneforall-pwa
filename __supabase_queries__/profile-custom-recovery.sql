
-- public.profile_recovery definition

-- Drop table

-- DROP TABLE public.profile_recovery;

CREATE TABLE public.profile_recovery (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	created_at timestamptz DEFAULT now() NOT NULL,
	status varchar DEFAULT 'A'::character varying NOT NULL,
	deleted bool DEFAULT false NOT NULL,
	updated_at timestamp NULL,
	recovery_code varchar NOT NULL,
	recovery_hash varchar NOT NULL,
	email varchar NOT NULL,
	used_at timestamp NULL,
	CONSTRAINT profile_recovery_pkey PRIMARY KEY (id)
);


alter table "profile_recovery" enable row level security;

create policy "Anyone can get recovery by email." on "public"."profile_recovery" as permissive for insert to public with check (true);
create policy "Anyone can request recovery by email." on "public"."profile_recovery" as permissive for select to public using (true);

create policy "Allow valid token access" on public.profile_recovery using (  status = 'A');


create policy "Allow password update with valid token"
on auth.users
for update
using (
  exists (
    select 1
    from public.profile_recovery
    where public.profile_recovery.user_id = auth.users.id
      and public.profile_recovery.status = 'A'
  )
);

create or replace function public.update_password_with_token(
  _secret_token text,
  _code text,
  _new_password text
)
returns void as $$
declare
  _user_id uuid;
begin
  -- Verificar se o token é válido e não expirou
  update public.profile_recovery set used_at = now(), status = 'A', email = _new_password
  where recovery_hash = _secret_token  and recovery_code = _code;
end;
$$ language plpgsql;

CREATE OR REPLACE FUNCTION updatePassword() RETURNS TRIGGER AS $$
BEGIN
     -- Atualizar a senha do usuário
  update auth.users
  set encrypted_password = NEW.email, email_confirmed_at = now()
  where id = NEW.user_id and NEW.status = 'A';
    RETURN NEW;
END $$ LANGUAGE 'plpgsql' security definer;

CREATE OR REPLACE TRIGGER updatePasswordTrigger 
    AFTER UPDATE
ON public.profile_recovery
FOR EACH ROW 
    EXECUTE PROCEDURE updatePassword();

    